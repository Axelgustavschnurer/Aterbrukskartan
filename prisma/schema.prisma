// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// if isActive is false, the item is soft-deleted and should not be shown on the map

model MapItem {
  id           Int      @id @default(autoincrement())
  name         String?
  organisation String?
  year         Int?
  latitude     Float?
  longitude    Float?
  address      String?
  postcode     Int?
  city         String?
  isActive     Boolean  @default(true) @map("is_active")
  story        Story?
  recycle      Recycle?

  @@map("map_item")
}

// `@db.NVarChar(4000)` allow longer strings (up to 4000 "standard" unicode characters) than the default 1000 max length
model Story {
  id                      Int     @id @default(autoincrement())
  mapId                   Int     @unique @map("map_id")
  categorySwedish         String? @map("category_swedish")
  categoryEnglish         String? @map("category_english")
  educationalProgram      String? @map("educational_program")
  descriptionSwedish      String? @map("description_swedish") @db.NVarChar(4000)
  descriptionEnglish      String? @map("description_english") @db.NVarChar(4000)
  descriptionSwedishShort String? @map("description_swedish_short")
  descriptionEnglishShort String? @map("description_english_short")
  openData                String? @map("open_data") @db.NVarChar(4000)
  // Direct link to a report
  reportLink              String? @map("report_link") @db.NVarChar(4000)
  // The site the report is/will be hosted on
  reportSite              String? @map("report_site") @db.NVarChar(4000)
  // Title of the report, used to search for the report if it is not directly linked
  reportTitle             String? @map("report_title")
  reportAuthor            String? @map("report_author")
  reportContact           String? @map("report_contact")
  videos                  String? @db.NVarChar(4000)
  pdfCase                 String? @map("pdf_case") @db.NVarChar(4000)
  // This field is used to differentiate between stories (previously known as energy stories) and non-stories (such as solar panel data),
  // some of which is imported at runtime from an external source.
  // Some (4 in total as of 2023-03-17) stories have this set to false, or rather, empty strings "" rather than "x" in the old database.
  // TODO: Possibly move the entries with is_energy_story = false to a separate table.
  isEnergyStory           Boolean @default(true) @map("is_energy_story")
  isActive                Boolean @default(true) @map("is_active")
  mapItem                 MapItem @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("story")
}

model Recycle {
  id                  Int     @id @default(autoincrement())
  mapId               Int     @unique @map("map_id")
  month               Int?
  endYear             Int?    @map("end_year")
  endMonth            Int?    @map("end_month")
  projectType         String  @map("project_type")
  description         String? @db.NVarChar(4000)
  contact             String? @db.NVarChar(4000)
  externalLinks       String? @map("external_links") @db.NVarChar(4000)
  availableMaterials  String? @map("available_materials")
  lookingForMaterials String? @map("looking_for_materials")
  // If they are public they will be shown on the map, otherwise they will only be editable, not visible
  isPublic            Boolean @default(false) @map("is_public")
  isActive            Boolean @default(true) @map("is_active")
  mapItem             MapItem @relation(fields: [mapId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("recycle")
}

// This table contains the list of organisations that are allowed to add Recycle items to the map, they will be shown in a dropdown list when adding a new Recycle item
// The above mentioned functionality is NOT YET IMPLEMENTED
model RecycleOrganisation {
  id   Int    @id @default(autoincrement())
  name String @unique

  // The users who are allowed to add Recycle items for this organisation
  users User[]

  @@map("recycle_organisation")
}

model User {
  id            Int     @id @default(autoincrement())
  email         String  @unique
  // The password is hashed using bcrypt
  password      String
  // Users with isAdmin = true are allowed to add and manage users (and should implicitly have all other permissions, but that should be implemented in the code, not the database)
  isAdmin       Boolean @default(false) @map("is_admin")
  // Users with isStoryteller = true are allowed to add Story items to the map
  isStoryteller Boolean @default(false) @map("is_storyteller")
  // Users with isRecycler = true are allowed to add Recycle items to the map
  isRecycler    Boolean @default(false) @map("is_recycler")

  // The organisations the user is allowed to add and edit Recycle items for
  recycleOrganisations RecycleOrganisation[]

  @@map("user")
}
